{"version":3,"sources":["reportWebVitals.js","cmps/Header.jsx","services/dbService.js","services/productService.js","cmps/ProductPreview.jsx","cmps/ProductList.jsx","pages/Home.jsx","pages/ProductDetails.jsx","App.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","className","exact","to","dbService","getRef","refName","firebase","database","ref","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","apps","length","initializeApp","productService","getProducts","getById","a","productsRef","get","snapshot","products","exists","val","console","log","dir","_id","productRef","orderByChild","equalTo","dbProductData","_extractProduct","Object","values","ProductPreview","product","this","props","id","src","images","url","alt","title","max_price","min_price","Intl","NumberFormat","style","currency","format","Component","ProductList","map","Home","state","loadProducts","setState","ProductDetails","primaryImg","dropdownsValues","updatedAttributes","mapAttributeIdToLabelData","quantity","loadProduct","match","params","getMatchingPropertiesByImage","matchingVariants","getMatchingVariants","attributeToLabelsMaps","getAttributeToLabelsMaps","getUpdatedVariantAttributes","createDropdownsValues","variants","filter","image","reduce","accumulator","variant","labels","i","index","findIndex","attribute_id","currLabelId","label_id","labelsIds","includes","push","obj","attributes","mapObj","matchedAttribute","find","updatedLabels","newAttribute","type","forEach","attribute","data","updateDropDownValues","attributeId","labelData","onSelectImage","img","handleChange","prop","target","value","getSelectedVariant","matchCounts","label","labelId","CheckAllDropdownsSelected","changeQuantity","direction","newQuantity","decrease","increase","buildUpdatedProductTitle","newTitle","isAllDropdownsSelected","idx","onClick","price","description","onSubmit","onClickSubmit","TextField","fullWidth","select","onChange","MenuItem","App","component","path","ReactDOM","render","document","getElementById"],"mappings":"uKAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCHP,SAASQ,IACZ,OACI,qBAAKC,UAAU,sBAAf,SACI,yBAAQA,UAAU,cAAlB,UACI,qBAAIA,UAAU,SAAd,iBAA2B,sBAAMA,UAAU,UAAhB,eAA3B,OACA,qBAAKA,UAAU,oBACf,qBAAKA,UAAU,oBAAf,SACI,cAAC,IAAD,CAASA,UAAU,UAAUC,OAAK,EAACC,GAAE,IAArC,yB,qECPPC,G,YAAY,CACrBC,OAqBJ,SAAgBC,GACZ,OAAOC,IAASC,WAAWC,IAAIH,MAnB7BI,EAAS,CACXC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,uEACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,6CAIFV,IAASW,KAAKC,QACfZ,IAASa,cAAcV,GClBxB,IAAMW,EAAiB,CAC1BC,Y,2CACAC,Q,yFAGJ,gCAAAC,EAAA,sEAEcC,EAAcrB,EAAUC,OAAO,YAF7C,SAG+BoB,EAAYC,MAH3C,cAGcC,EAHd,OAIcC,EAAWD,EAASE,SAAWF,EAASG,MAAQ,KAJ9D,kBAKeF,GALf,sCAQQG,QAAQC,IAAI,uCACZD,QAAQE,IAAR,MATR,+D,kEAeA,WAAuBC,GAAvB,mBAAAV,EAAA,sEAEcW,EAAa/B,EAAUC,OAAO,YAAY+B,aAAa,MAAMC,QAAQH,GAFnF,SAG+BC,EAAWT,MAH1C,cAGcC,EAHd,OAIcW,EAAgBX,EAASE,SAAWF,EAASG,MAAQ,KAJnE,kBAKeS,EAAgBD,IAL/B,sCAQQP,QAAQC,IAAR,8CAAmDE,EAAnD,aACAH,QAAQE,IAAR,MATR,+D,sBAcA,SAASM,EAAgBD,GAErB,OADaE,OAAOC,OAAOH,GACf,GCnCT,IAAMI,EAAb,4JACI,WACI,IAAQC,EAAYC,KAAKC,MAAjBF,QACR,OACI,yBAAS1C,UAAU,4BAAnB,SACI,eAAC,IAAD,CAAMA,UAAU,kBAAkBE,GAAE,kBAAawC,EAAQG,IAAzD,UACI,qBAAK7C,UAAU,sBAAf,SACI,qBAAKA,UAAU,UAAU8C,IAAKJ,EAAQK,OAAO,GAAGC,IAAKC,IAAI,uBAE7D,qBAAKjD,UAAU,wBAAf,SAAwC0C,EAAQQ,QAChD,qBAAKlD,UAAU,wBAAf,SAAwC0C,EAAQS,YAAcT,EAAQU,UAA9B,UAA6C,IAAIC,KAAKC,aAAa,QAAS,CAAEC,MAAO,WAAYC,SAAU,QAASC,OAAOf,EAAQU,WAAnI,cAAmJ,IAAIC,KAAKC,aAAa,QAAS,CAAEC,MAAO,WAAYC,SAAU,QAASC,OAAOf,EAAQS,YAAe,IAAIE,KAAKC,aAAa,QAAS,CAAEC,MAAO,WAAYC,SAAU,QAASC,OAAOf,EAAQS,sBAV1Y,GAAoCO,aCA7B,SAASC,EAAT,GAAoC,IAAbhC,EAAY,EAAZA,SAE1B,OACI,qBAAK3B,UAAU,qBAAf,SACK2B,EAASiC,KAAI,SAAAlB,GAAO,OAAI,cAAC,EAAD,CAAgBA,QAASA,GAAcA,EAAQG,SCH7E,IAAMgB,EAAb,4MAEIC,MAAQ,GAFZ,EAQIC,aARJ,sBAQmB,4BAAAxC,EAAA,sEACYH,EAAeC,cAD3B,OACLM,EADK,OAEX,EAAKqC,SAAS,CAAErC,aAFL,2CARnB,uDAII,WACIgB,KAAKoB,iBALb,oBAaI,WACI,IAAQpC,EAAagB,KAAKmB,MAAlBnC,SACR,OAAKA,EAED,0BAAS3B,UAAU,OAAnB,UACI,qBAAKA,UAAU,cAAf,SACI,qBAAKA,UAAU,YAAf,SACI,oBAAIA,UAAU,sBAAd,0BAGR,cAAC2D,EAAD,CAAahC,SAAUA,OART,4BAf9B,GAA0B+B,a,0BCAbO,EAAb,4MAEIH,MAAQ,CACJpB,QAAS,KACTwB,WAAY,KACZC,gBAAiB,KACjBC,kBAAmB,KACnBC,0BAA2B,GAC3BC,SAAU,GARlB,EAeIC,YAfJ,sBAekB,sCAAAhD,EAAA,6DACFsB,EAAO,EAAKD,MAAM4B,MAAMC,OAAxB5B,GADE,SAEYzB,EAAeE,QAAQuB,GAFnC,OAEJH,EAFI,OAGJwB,EAAaxB,EAAQK,OAAO,GAHxB,EAIqC,EAAK2B,6BAA6BhC,EAASwB,GAAlFE,EAJE,EAIFA,kBAAmBD,EAJjB,EAIiBA,gBAC3B,EAAKH,SAAS,CAAEtB,UAASwB,aAAYE,oBAAmBD,oBAL9C,2CAflB,EAwBIO,6BAA+B,SAAChC,EAASwB,GACrC,IAAMS,EAAmB,EAAKC,oBAAoBlC,EAASwB,GACrDW,EAAwB,EAAKC,yBAAyBH,GACtDP,EAAoB,EAAKW,4BAA4BrC,EAASmC,GAEpE,MAAO,CAAET,oBAAmBD,gBADJ,EAAKa,sBAAsBZ,KA5B3D,EAiCIQ,oBAAsB,SAAClC,EAASwB,GAC5B,OAAOxB,EAAQuC,SAASC,QAAO,qBAAGC,MAASjC,QAAwBgB,EAAWhB,UAlCtF,EAwCI4B,yBAA2B,SAACG,GAqBxB,OApB8BA,EAASG,QACnC,SAACC,EAAaC,GAEV,IADA,IAAMC,EAASD,EAAQC,OADD,WAEbC,GAEL,IAAMC,EAAQJ,EAAYK,WAAU,qBAAGC,eAAoCJ,EAAOC,GAAGG,gBACrF,GAAIF,GAAS,EAAG,CACZ,IAAMG,EAAcL,EAAOC,GAAGK,SACzBR,EAAYI,GAAOK,UAAUC,SAASH,IACvCP,EAAYI,GAAOK,UAAUE,KAAKJ,OAGrC,CACD,IAAMK,EAAM,CAAEN,aAAcJ,EAAOC,GAAGG,aAAcG,UAAW,CAACP,EAAOC,GAAGK,WAC1ER,EAAYW,KAAKC,KAXhBT,EAAI,EAAGA,EAAID,EAAOrE,OAAQsE,IAAM,EAAhCA,GAcT,OAAOH,IACR,KA3Df,EAiEIN,4BAA8B,SAACrC,EAASmC,GACpC,IAAMqB,EAAaxD,EAAQwD,WAC3B,OAAOrB,EAAsBO,QACzB,SAACC,EAAac,GAEV,IAAMC,EAAgB,eAAQF,EAAWG,MAAK,qBAAGxD,KAAgBsD,EAAOR,iBAElEW,EAAgBF,EAAiBb,OAAOL,QAAO,gBAAGrC,EAAH,EAAGA,GAAH,OAAYsD,EAAOL,UAAUC,SAASlD,MAErF0D,EAAe,CACjB1D,GAAIuD,EAAiBvD,GACrBK,MAAOkD,EAAiBlD,MACxBsD,KAAMJ,EAAiBI,KACvBjB,OAAQe,GAIZ,OADAjB,EAAYW,KAAKO,GACVlB,IACR,KAnFf,EAyFIL,sBAAwB,SAACZ,GACrB,IAAMD,EAAkB,GAIxB,OAHAC,EAAkBqC,SAAQ,SAACC,GACvBvC,EAAgBuC,EAAU7D,IAAkC,IAA5B6D,EAAUnB,OAAOrE,OAAewF,EAAUnB,OAAO,GAAGoB,KAAO,MAExFxC,GA9Ff,EAkGIyC,qBAAuB,SAACC,EAAaC,GACjC,IAAQ3C,EAAoB,EAAKL,MAAzBK,gBACRA,EAAgB0C,GAAeC,EAC/B,EAAK9C,SAAS,CAAEG,qBArGxB,EAyGI4C,cAAgB,SAACC,GACb,IAAQtE,EAAY,EAAKoB,MAAjBpB,QACR,EAA+C,EAAKgC,6BAA6BhC,EAASsE,GAAlF5C,EAAR,EAAQA,kBAAmBD,EAA3B,EAA2BA,gBAC3B,EAAKH,SAAS,CAAEE,WAAY8C,EAAK7C,kBAAiBC,uBA5G1D,EAgHI6C,aAAe,SAACC,GAAD,OAAU,YAAiB,IAAdC,EAAa,EAAbA,OAClBN,EAAcK,EACdJ,EAAYK,EAAOC,MACzB,EAAKR,qBAAqBC,EAAaC,KAnH/C,EAyHIO,mBAAqB,WACjB,MAAqC,EAAKvD,MAAlCpB,EAAR,EAAQA,QAASyB,EAAjB,EAAiBA,gBACjB,iBAAsCzB,GAA9BwD,EAAR,EAAQA,WAAYjB,EAApB,EAAoBA,SAEpB,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAUoB,MAAK,SAAAf,GAIlB,IADA,IAAIgC,EAAc,EAHW,WAIpB9B,GAEL,IAAM+B,EAAQjC,EAAQC,OAAOC,GAEvBgC,EAAUD,EAAM1B,SAChBgB,EAAcU,EAAM5B,aAERO,EAAWG,MAAK,qBAAGxD,KAAgBgE,KAEhBtB,OAAOc,MAAK,qBAAGxD,KAAgB2E,KAE7Cb,OAASxC,EAAgB0C,IAC5CS,KAZC9B,EAAI,EAAGA,EAAIF,EAAQC,OAAOrE,OAAQsE,IAAM,EAAxCA,GAiBT,OAAO8B,IAAgBhC,EAAQC,OAAOrE,WAlJlD,EAyJIuG,0BAA4B,WACxB,MAAqC,EAAK3D,MAAlCK,EAAR,EAAQA,gBAAiBzB,EAAzB,EAAyBA,QACzB,SAAIyB,IAAmBzB,IACcH,OAAOC,OAAO2B,GAAiBe,QAAO,SAAA4B,GAAS,MAAkB,KAAdA,KAAkB5F,SAClEwB,EAAQwD,WAAWhF,QA7JnE,EAmKIwG,eAAiB,SAACC,GACd,IAAQrD,EAAa,EAAKR,MAAlBQ,SACFsD,EAA4B,SAAdD,EAAuB,EAAKE,SAASvD,GAAY,EAAKwD,SAASxD,GACnF,EAAKN,SAAS,CAAEM,SAAUsD,KAtKlC,EAyKIE,SAAW,SAACxD,GACR,OAAiB,KAAbA,EAAwBA,IACnBA,GA3KjB,EA8KIuD,SAAW,SAACvD,GACR,OAAiB,IAAbA,EAAuBA,IAClBA,GAhLjB,EAoLIyD,yBAA2B,WACvB,MAAqC,EAAKjE,MAAlCpB,EAAR,EAAQA,QAASyB,EAAjB,EAAiBA,gBACb6D,EAAWtF,EAAQQ,MAFM,WAGlB2D,GACP,GAAqC,KAAjC1C,EAAgB0C,GAAqB,CACrC,IAAMH,EAAYhE,EAAQwD,WAAWG,MAAK,qBAAGxD,KAAgBgE,KACvDU,EAAQb,EAAUnB,OAAOc,MAAK,qBAAGM,OAAoBxC,EAAgB0C,MAC3EmB,GAAQ,WAAQtB,EAAUxD,MAAlB,aAA4BqE,EAAMrE,MAAlC,OAJhB,IAAK,IAAM2D,KAAe1C,EAAkB,EAAjC0C,GAOX,OAAOmB,GA9Lf,uDAWI,WACIrF,KAAK4B,gBAZb,oBAiMI,WAAU,IAAD,SACL,EAAgC5B,KAAKmB,MAA7BpB,EAAR,EAAQA,QAASwB,EAAjB,EAAiBA,WACXgC,EAAavD,KAAKmB,MAAMM,kBACxBkB,EAAU3C,KAAK0E,qBACfY,EAAyBtF,KAAK8E,4BAEpC,OAAK/E,EAED,0BAAS1C,UAAU,kBAAnB,UACI,qBAAKA,UAAU,gBAAf,mBACK0C,EAAQK,cADb,aACK,EAAgBa,KAAI,SAACoD,EAAKkB,GAAN,OACjB,qBACIlI,UAAS,cAASkI,EAAT,yBAA6BlB,EAAI9D,QAAUgB,EAAWhB,MAAQ,WAAa,IAEpFJ,IAAKkE,EAAIhE,IACTmF,QAAS,kBAAM,EAAKpB,cAAcC,IAClC/D,IAAI,eAHCiF,QAQjB,sBAAKlI,UAAU,eAAf,UACI,qBAAKA,UAAU,gBAAf,UAAuC,OAAPsF,QAAO,IAAPA,OAAA,EAAAA,EAASpC,QAASP,KAAKoF,6BACtDzC,GAAW,qBAAKtF,UAAU,gBAAf,0BAA0C,IAAIqD,KAAKC,aAAa,QAAS,CAAEC,MAAO,WAAYC,SAAU,QAASC,OAAO6B,EAAQ8C,WAC1I9C,GAAW,qCAER2C,GAA0B,qBAAKjI,UAAU,gBAAf,2BACzBiI,GAA0B,qBAAKjI,UAAU,kBAAf,+DAMhC,mBAAGA,UAAU,sBAAb,SAAoC0C,EAAQ2F,iBAGhD,uBAAMrI,UAAU,eAAhB,UACI,qBAAKA,UAAU,sBAAsBsI,SAAU3F,KAAK4F,cAApD,SACKrC,EAAWtC,KAAI,SAAA8C,GAAS,OAAK,cAAC8B,EAAA,EAAD,CAE1B3F,GAAI6D,EAAU7D,GACd4F,WAAS,EACTC,QAAM,EACNnB,MAAOb,EAAUxD,MACjBkE,MAAO,EAAKtD,MAAMK,gBAAgBuC,EAAU7D,IAC5C2D,KAAME,EAAUF,KAChBmC,SAAU,EAAK1B,aAAaP,EAAU7D,IACtCyC,QAAQ,WATkB,SAYzBoB,EAAUnB,OAAO3B,KAAI,SAAC2D,GAAD,OAClB,cAACqB,EAAA,EAAD,CAAyBxB,MAAOG,EAAMZ,KAAtC,SACKY,EAAMrE,OADIqE,EAAM1E,QAZpB6D,EAAU7D,SAoBvB,sBAAK7C,UAAU,kBAAf,UACI,qBAAKA,UAAU,iBAAf,sBACA,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,eAAemI,QAAS,kBAAM,EAAKT,eAAe,SAAjE,eACA,qBAAK1H,UAAU,eAAf,SAA+B2C,KAAKmB,MAAMQ,WAC1C,qBAAKtE,UAAU,eAAemI,QAAS,kBAAM,EAAKT,eAAe,OAAjE,qBAKR,qBAAK1H,UAAU,+BAAf,SACI,qBAAKA,UAAU,cAAf,iCAhEK,4BAvM7B,GAAoC0D,aCE7B,SAASmF,IACd,OACE,sBAAK7I,UAAU,MAAf,UACE,cAACD,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO+I,UAAW7E,EAAgB8E,KAAK,iBACvC,cAAC,IAAD,CAAOD,UAAWjF,EAAMkF,KAAK,Y,MCJrCC,IAASC,OACP,cAAC,IAAD,UACE,cAACJ,EAAD,MAEFK,SAASC,eAAe,SAM1B7J,M","file":"static/js/main.fac67a69.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\nexport function Header() {\r\n    return (\r\n        <div className=\"main-header-wrapper\">\r\n            <header className=\"main-header\">\r\n                <h1 className=\"e-shop\">e-sh<span className=\"colored\">o</span>p</h1>\r\n                <div className=\"horizontal-line\"></div>\r\n                <div className=\"nav-btn-container\">\r\n                    <NavLink className=\"nav-btn\" exact to={`/`}>home</NavLink>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    )\r\n}","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nexport const dbService = {\r\n    getRef\r\n}\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCS142LthvcfvYfjWUwc6DTUWpRbVkLr7U\",\r\n    authDomain: \"e-shop-ad79d.firebaseapp.com\",\r\n    databaseURL: 'https://e-shop-ad79d-default-rtdb.europe-west1.firebasedatabase.app/',\r\n    projectId: \"e-shop-ad79d\",\r\n    storageBucket: \"e-shop-ad79d.appspot.com\",\r\n    messagingSenderId: \"774917610561\",\r\n    appId: \"1:774917610561:web:c9e1a8d4cc7ac359477ac0\"\r\n};\r\n\r\nfunction initFireBase() {\r\n    if (!firebase.apps.length) {\r\n        firebase.initializeApp(config)\r\n    }\r\n}\r\n\r\ninitFireBase()\r\n\r\nfunction getRef(refName) {\r\n    return firebase.database().ref(refName)\r\n}\r\n\r\n","import { dbService } from './dbService';\n\nexport const productService = {\n    getProducts,\n    getById\n}\n\nasync function getProducts() {\n    try {\n        const productsRef = dbService.getRef('products')\n        const snapshot = await productsRef.get()\n        const products = snapshot.exists() ? snapshot.val() : null\n        return products\n    }\n    catch (err) {\n        console.log('Had Issues getting products from db');\n        console.dir(err);\n        throw err;\n    }\n\n}\n\nasync function getById(_id) {\n    try {\n        const productRef = dbService.getRef('products').orderByChild('id').equalTo(_id)\n        const snapshot = await productRef.get()\n        const dbProductData = snapshot.exists() ? snapshot.val() : null\n        return _extractProduct(dbProductData)\n    }\n    catch (err) {\n        console.log(`Had Issues getting product with id: ${_id} from db`);\n        console.dir(err);\n        throw err;\n    }\n}\n\nfunction _extractProduct(dbProductData) {\n    const data = Object.values(dbProductData)\n    return data[0]\n}","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport class ProductPreview extends Component {\r\n    render() {\r\n        const { product } = this.props\r\n        return (\r\n            <section className=\"product-preview-container\" >\r\n                <Link className=\"product-preview\" to={`product/${product.id}`}>\r\n                    <div className=\"product-preview-img\">\r\n                        <img className=\"img-fit\" src={product.images[0].url} alt=\"product-main-img\" />\r\n                    </div>\r\n                    <div className=\"product-preview-title\">{product.title}</div>\r\n                    <div className=\"product-preview-price\">{product.max_price !== product.min_price ? `${new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'USD' }).format(product.min_price)} - ${new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'USD' }).format(product.max_price)}` : new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'USD' }).format(product.max_price)}</div>\r\n                </Link>\r\n            </section>)\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { ProductPreview } from './ProductPreview.jsx'\r\n\r\nexport function ProductList({ products }) {\r\n\r\n    return (\r\n        <div className=\"products-list-grid\">\r\n            {products.map(product => <ProductPreview product={product} key={product.id} />)}\r\n        </div>\r\n    )\r\n} ","import React, { Component } from \"react\";\r\nimport { productService } from '../services/productService.js'\r\nimport { ProductList } from '../cmps/ProductList.jsx'\r\n\r\nexport class Home extends Component {\r\n\r\n    state = {}\r\n\r\n    componentDidMount() {\r\n        this.loadProducts()\r\n    }\r\n\r\n    loadProducts = async () => {\r\n        const products = await productService.getProducts();\r\n        this.setState({ products })\r\n    }\r\n    \r\n    render() {\r\n        const { products } = this.state\r\n        if (!products) return <div></div>\r\n        return (\r\n            <section className=\"home\">\r\n                <div className=\"home-header\">\r\n                    <div className=\"rectangle\">\r\n                        <h1 className=\"home-title products\">products</h1>\r\n                    </div>\r\n                </div>\r\n                <ProductList products={products} />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { TextField, MenuItem } from '@material-ui/core';\r\nimport { productService } from '../services/productService.js'\r\n\r\nexport class ProductDetails extends Component {\r\n\r\n    state = {\r\n        product: null,\r\n        primaryImg: null,\r\n        dropdownsValues: null,\r\n        updatedAttributes: null,\r\n        mapAttributeIdToLabelData: {},\r\n        quantity: 1,\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadProduct()\r\n    }\r\n\r\n    loadProduct = async () => {\r\n        const { id } = this.props.match.params\r\n        const product = await productService.getById(id)\r\n        const primaryImg = product.images[0]\r\n        const { updatedAttributes, dropdownsValues } = this.getMatchingPropertiesByImage(product, primaryImg)\r\n        this.setState({ product, primaryImg, updatedAttributes, dropdownsValues })\r\n    }\r\n\r\n\r\n    getMatchingPropertiesByImage = (product, primaryImg) => {\r\n        const matchingVariants = this.getMatchingVariants(product, primaryImg)\r\n        const attributeToLabelsMaps = this.getAttributeToLabelsMaps(matchingVariants)\r\n        const updatedAttributes = this.getUpdatedVariantAttributes(product, attributeToLabelsMaps)\r\n        const dropdownsValues = this.createDropdownsValues(updatedAttributes)\r\n        return { updatedAttributes, dropdownsValues }\r\n    }\r\n\r\n    // returns variants with the same image property as primaryImg\r\n    getMatchingVariants = (product, primaryImg) => {\r\n        return product.variants.filter(({ image: { title } }) => title === primaryImg.title)\r\n    }\r\n\r\n\r\n    // creating an array of objects which includes attribute id and matching label ids\r\n    // for example [{attribute_id:'1',labelsIds:['2']},{attribute_id:'2',labelsIds:['2','3']}]\r\n    getAttributeToLabelsMaps = (variants) => {\r\n        const attributeToLabelsMaps = variants.reduce(\r\n            (accumulator, variant) => {\r\n                const labels = variant.labels\r\n                for (let i = 0; i < labels.length; i++) {\r\n                    //getting the index of the object with the attribute id\r\n                    const index = accumulator.findIndex(({ attribute_id }) => attribute_id === labels[i].attribute_id)\r\n                    if (index > -1) {\r\n                        const currLabelId = labels[i].label_id\r\n                        if (!accumulator[index].labelsIds.includes(currLabelId)) {\r\n                            accumulator[index].labelsIds.push(currLabelId)\r\n                        }\r\n                    }\r\n                    else {\r\n                        const obj = { attribute_id: labels[i].attribute_id, labelsIds: [labels[i].label_id] }\r\n                        accumulator.push(obj)\r\n                    }\r\n                }\r\n                return accumulator\r\n            }, []\r\n        )\r\n        return attributeToLabelsMaps\r\n    }\r\n\r\n    // create a new attributes array with updated labels according to attributeToLabelsMaps array\r\n    getUpdatedVariantAttributes = (product, attributeToLabelsMaps) => {\r\n        const attributes = product.attributes\r\n        return attributeToLabelsMaps.reduce(\r\n            (accumulator, mapObj) => {\r\n                //find a matching attribute and create a shallow copy\r\n                const matchedAttribute = { ...attributes.find(({ id }) => id === mapObj.attribute_id) }\r\n                // create a new labels array\r\n                const updatedLabels = matchedAttribute.labels.filter(({ id }) => mapObj.labelsIds.includes(id))\r\n                // create a new attribute object (pushing updatedLabels to matchedAttributes will change the original attributes array)\r\n                const newAttribute = {\r\n                    id: matchedAttribute.id,\r\n                    title: matchedAttribute.title,\r\n                    type: matchedAttribute.type,\r\n                    labels: updatedLabels\r\n\r\n                }\r\n                accumulator.push(newAttribute)\r\n                return accumulator\r\n            }, []\r\n        )\r\n    }\r\n\r\n    // creates a dropdown values object were key is an attribute id and value is labels data\r\n    // for example {'1':'brown', '2':'large'}\r\n    createDropdownsValues = (updatedAttributes) => {\r\n        const dropdownsValues = {}\r\n        updatedAttributes.forEach((attribute) => {\r\n            dropdownsValues[attribute.id] = attribute.labels.length === 1 ? attribute.labels[0].data : ''\r\n        })\r\n        return dropdownsValues\r\n    }\r\n\r\n    //updates dropdown values object with new attribute/label pair\r\n    updateDropDownValues = (attributeId, labelData) => {\r\n        const { dropdownsValues } = this.state\r\n        dropdownsValues[attributeId] = labelData\r\n        this.setState({ dropdownsValues })\r\n    }\r\n\r\n    //update properties when selecting new image from gallery\r\n    onSelectImage = (img) => {\r\n        const { product } = this.state\r\n        const { updatedAttributes, dropdownsValues } = this.getMatchingPropertiesByImage(product, img)\r\n        this.setState({ primaryImg: img, dropdownsValues, updatedAttributes })\r\n    }\r\n\r\n    //when selecting new dropdown value\r\n    handleChange = (prop) => ({ target }) => {\r\n        const attributeId = prop\r\n        const labelData = target.value\r\n        this.updateDropDownValues(attributeId, labelData)\r\n    }\r\n\r\n\r\n    // returns a variant from product.\r\n    // if all dropdowns have a value then returns the variant else returns undefined\r\n    getSelectedVariant = () => {\r\n        const { product, dropdownsValues } = this.state\r\n        const { attributes, variants } = { ...product }\r\n\r\n        return variants?.find(variant => {\r\n\r\n            //create a counter for matches\r\n            let matchCounts = 0\r\n            for (let i = 0; i < variant.labels.length; i++) {\r\n                // current label from labels array in variants\r\n                const label = variant.labels[i]\r\n                // get labelId and attributeId from each label object in labels array in product\r\n                const labelId = label.label_id\r\n                const attributeId = label.attribute_id\r\n                // from attributes array in product, get the attribute with the same id as attributeId\r\n                const attribute = attributes.find(({ id }) => id === attributeId)\r\n                // search labels array in attribute and get label object with id that matches labelId\r\n                const labelFromAttribute = attribute.labels.find(({ id }) => id === labelId)\r\n                // if there is a match increment matchCounts\r\n                if (labelFromAttribute.data === dropdownsValues[attributeId]) {\r\n                    matchCounts++\r\n                }\r\n            }\r\n            // if there was a match for each label object in labels send true\r\n            // to the find function and get the current variant\r\n            return matchCounts === variant.labels.length\r\n        })\r\n\r\n    }\r\n\r\n    // checks if all dropdowns have a selected value.\r\n    // return boolean \r\n    CheckAllDropdownsSelected = () => {\r\n        const { dropdownsValues, product } = this.state\r\n        if (dropdownsValues && product) {\r\n            const numOfDropdownsWithValues = Object.values(dropdownsValues).filter(labelData => labelData !== '').length\r\n            return numOfDropdownsWithValues === product.attributes.length\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    changeQuantity = (direction) => {\r\n        const { quantity } = this.state\r\n        const newQuantity = direction === 'down' ? this.decrease(quantity) : this.increase(quantity)\r\n        this.setState({ quantity: newQuantity })\r\n    }\r\n\r\n    increase = (quantity) => {\r\n        if (quantity === 10) return quantity\r\n        return ++quantity\r\n    }\r\n\r\n    decrease = (quantity) => {\r\n        if (quantity === 1) return quantity\r\n        return --quantity\r\n    }\r\n\r\n    //add selected dropdown values to title \r\n    buildUpdatedProductTitle = () => {\r\n        const { product, dropdownsValues } = this.state\r\n        let newTitle = product.title\r\n        for (const attributeId in dropdownsValues) {\r\n            if (dropdownsValues[attributeId] !== '') {\r\n                const attribute = product.attributes.find(({ id }) => id === attributeId)\r\n                const label = attribute.labels.find(({ data }) => data === dropdownsValues[attributeId])\r\n                newTitle += ` ${attribute.title}: ${label.title}.`\r\n            }\r\n        }\r\n        return newTitle\r\n    }\r\n\r\n    render() {\r\n        const { product, primaryImg } = this.state\r\n        const attributes = this.state.updatedAttributes\r\n        const variant = this.getSelectedVariant()\r\n        const isAllDropdownsSelected = this.CheckAllDropdownsSelected()\r\n       \r\n        if (!product) return <div></div>\r\n        return (\r\n            <section className=\"product-details\">\r\n                <div className=\"image-gallery\">\r\n                    {product.images?.map((img, idx) => (\r\n                        <img\r\n                            className={`img-${idx} gallery-child${img.title === primaryImg.title ? ' primary' : ''}`}\r\n                            key={idx}\r\n                            src={img.url}\r\n                            onClick={() => this.onSelectImage(img)}\r\n                            alt=\"product-img\"\r\n                        />\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"product-info\">\r\n                    <div className=\"product-title\">{variant?.title || this.buildUpdatedProductTitle()}</div>\r\n                    {variant && <div className=\"product-price\">{`Price: ${new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'USD' }).format(variant.price)}`}</div>}\r\n                    {!variant && <>\r\n\r\n                        {isAllDropdownsSelected && <div className=\"product-price\">Out of Stock</div>}\r\n                        {!isAllDropdownsSelected && <div className=\"calculate-price\">(Please Select all options to calculate price)</div>}\r\n\r\n                    </>\r\n\r\n                    }\r\n        \r\n                    <p className=\"product-description\">{product.description}</p>\r\n                </div>\r\n\r\n                <form className=\"variant-form\" >\r\n                    <div className=\"dropdowns-container\" onSubmit={this.onClickSubmit}>\r\n                        {attributes.map(attribute => (<TextField\r\n                            key={attribute.id}\r\n                            id={attribute.id}\r\n                            fullWidth\r\n                            select\r\n                            label={attribute.title}\r\n                            value={this.state.dropdownsValues[attribute.id]}\r\n                            type={attribute.type}\r\n                            onChange={this.handleChange(attribute.id)}\r\n                            variant=\"outlined\"\r\n\r\n                        >\r\n                            {attribute.labels.map((label) => (\r\n                                <MenuItem key={label.id} value={label.data}>\r\n                                    {label.title}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>))\r\n                        }\r\n\r\n                    </div>\r\n                    <div className=\"quantity-select\">\r\n                        <div className=\"quantity-title\">Quantity</div>\r\n                        <div className=\"quantity-input\">\r\n                            <div className=\"decrease-btn\" onClick={() => this.changeQuantity('down')}>-</div>\r\n                            <div className=\"custom-input\">{this.state.quantity}</div>\r\n                            <div className=\"increase-btn\" onClick={() => this.changeQuantity('up')}>+</div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"btn variant-form-submit-btn \">\r\n                        <div className=\"Add-to-cart\">Add to cart</div>\r\n                    </div>\r\n\r\n                </form>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { Header } from './cmps/Header.jsx'\r\nimport { Home } from './pages/Home.jsx'\r\nimport { ProductDetails } from './pages/ProductDetails.jsx'\r\n\r\nexport function App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      <Switch>\r\n        <Route component={ProductDetails} path='/product/:id' />\r\n        <Route component={Home} path='/' />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './App';\n\nimport './assets/scss/global.scss'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}